import Variations from '../variations/index';
import Cookies from '../utils/Cookies';
import GenerateTimestamp from './generate-timestamp';

class PageTracking
{
  constructor(cfg = {}) {
    this.debug = (cfg.debug ? cfg.debug : false);
    this.rsid = cfg.rsid;
    this.s = s_gi(this.rsid);

    this.initialize();
  }

  initialize() {
    this.readMetaTag();
    if (!this.rsid || !this.pageName) return false;

    this.buildPageObject();
    this.setOptimizelyListVar();
    this.trackPageView();
  }

  readMetaTag() {
    let meta = document.querySelector('meta[name="page-tracking"]');
    this.pageName = (meta ? meta.getAttribute('content').toLowerCase() : false);
  }

  buildPageObject()
  {
    let ppv;

    this.resetVariables();
    this.s.list1 = '';
    this.s.pageName = this.pageName;

    // custom values for 404 page
    if(this.pageName == 'sho:utility:error:404') {
      this.s.pageName = null;
      this.s.pageType = 'errorPage';
    }

    // custom event for order page (tray open)
    if(this.pageName == 'sho:order:home' && document.location.href.indexOf('order-showtime') === -1) {
      this.setCustomEvent(97);
      Cookies.set('sho_order_tray_opened', true);
    }

    this.s.eVar20 = "D=pageName"; // sets to dynamic variable in image request
    this.s.hier1 = this.pageName;
    this.setCustomEvent(3); // page view event

    // set individual sProps by subdividing pageName
    let i=1, sProps = this.pageName.split(':');
    while(sProps.length)
    {
      this.setProp(i, sProps.shift()); i++;
    }

    // set previous page data sProps
    // had to wrap these calls to s.getPreviousValue and s.getPercentPageViewed in defensive if() statements
    // because they were breaking all js behaviors on first load of homepage (SITE-14429)
    if(s.getPreviousValue){
      this.setProp(42, this.s.getPreviousValue(s.pageName,'s_ppn')); //prop42: prev page name
    }

    if(s.getPercentPageViewed){
      ppv = this.s.getPercentPageViewed(s.pageName); //get array of data on prev page % viewed
    }

    //if ppv array returned and prev page id matches prev page name
    if( ppv && typeof ppv=='object' && ppv[0] == this.s.prop42 ) {
      this.setProp(43, (ppv[1] + '|' + ppv[2])); //prop43: prev page max and initial % viewed, delimited by "|".
      this.setProp(44, (ppv[4] + 'x' + ppv[5])); //prop44: viewport width x height in CSS pixels
      this.setProp(45, (ppv[6] + 'x' + ppv[7])); //prop45: display monitor width x height in real pixels
      this.setProp(46, ppv[8]); //prop46: pixel density, i.e. number of virtual pixels per real pixel
      this.setProp(47, ppv[9]); //prop47: device orientation: initial and final (final only present if rotation occurred)
    }
  }

  setProp(index,value) {
    this.s['prop' + index ] = value;
  }

  setCustomEvent(index) {
    this.s.events = (this.s.events != '' ? this.s.events + ',' : '') + 'event' + index;
    this.s.linkTrackEvents = (this.s.linkTrackEvents != '' ? this.s.linkTrackEvents + ',' : '') + 'event' + index;
  }

  setOptimizelyListVar() {
    if (window.optimizely && typeof window.optimizely.get === 'function' && window.optimizely.get("custom/adobeIntegrator")) {
      window.optimizely.get("custom/adobeIntegrator").assignCampaigns(this.s);
    }
  }

  parseOptimizelyListVar() {
      this.s.list1.forEach((name, index) => {
        // modify original decisionString generated by Optimizely
        /*
        original A/B: Order | Local Analytics Test(11504275331):Original(11612420777)
        modified A/B: Order | Local Analytics Test | Original | 11504275331:11612420777
        original Personalization: Order | Local Personalization Test(11470055294):Experience #1(11621920567):Variation #1(11568565818):holdback
        modified Personalization: Order | Local Personalization Test | Experience #1 | Variation #1:holdback | 11470055294:11621920567:11568565818
        */

        if (name.indexOf(":") > -1) {
          // replace first colon with " | "
          name = name.replace(/:\s*/g," | ");

          // find and store IDs based on ([0-9]) pattern
          let IDs = name.match(/(\([0-9]*\))+/g);

          if (IDs.length > 0) {
             name += " | ";
             for (let i = 0; i < IDs.length; i++) {
               // remove IDs and their parentheses from string
               name = name.replace(IDs[i],'');
               // remove parentheses from ID
               IDs[i] = IDs[i].replace(/\(|\)/g,'');
               name += IDs[i];
               if (i < IDs.length-1) name += ':';
             }
          }
        }

        if (name.indexOf("holdback")) {
          name = name.replace(" | holdback",":holdback");
        }

        this.s.list1[index] = name;
    });
  }

  trackPageView() {
    if(this.s.list1.length > 0) {
      this.parseOptimizelyListVar();
      for (let listElement of this.s.list1) {
        this.log('optimizely | ' + listElement);
      }
    }

    // set timestamp in eVar56
    this.s.eVar56 = GenerateTimestamp();

    // make impression
    let s_code = this.s.t();
    if(s_code) document.write(s_code);

    this.log('page | ' +  this.s.pageName);
    this.log('events | ' + this.s.events);


    this.resetVariables();
  }

  resetVariables()  {
    this.s.events = '';
    this.s.linkTrackEvents = '';
  }

  log(output) {
    if(this.debug && window.console && window.console.log)
    {
      console.log('| analytics |', output);
    }
  }
}

export default PageTracking;
